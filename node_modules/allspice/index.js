var fs = require('fs'),
  path = require('path'),
  parallel = require('../../lib/flow').parallel,
  series = require('../../lib/flow').series,
  cwd = process.cwd;

module.exports = function (files, ws) {
  var absoluteFiles = getAbsoluteFileList(files),
    includes = {};

  parallel([
      function (cb) { load('infrastructure', includes, cb); },
      function (cb) { load('template', includes, cb); },
      function (cb) { writeFileList(absoluteFiles, ws); cb(null); }
    ],
    function (err) {
      if (err) throw err;

      // Write all infrastructure code required in combined file.
      ws.write(includes.infrastructure);

      // Write out all modules and then load them.
      writeAllModules(absoluteFiles, includes.template, ws, function (err) {
        if (err) throw err;
        writeLoadingOfModules(ws);
      });
    });
};

function getAbsoluteFileList(files) {
  return files.map(function (file) {
    return path.resolve(cwd, file);
  });
}
function writeFileList(files, ws) {
  var absoluteFiles = files.map(function (file) {
    return escape(file);
  });
  ws.write('var combinedModules = [\n  "');
  ws.write(absoluteFiles.join('",\n  "'));
  ws.write('"\n];\n');
  return absoluteFiles;
};

function writeAllModules(files, template, ws, callback) {
  var moduleWriters = files.map(function (file) {
    return getModuleWriter(file, template, ws);
  });
  series(moduleWriters, callback);
}

function load(name, includes, callback) {
  fs.readFile(path.join(__dirname, name + '.js'), 'utf8', function (err, data) {
    if (err) return callback(err);
    includes[name] = data;
    callback(null);
  });
}

function getModuleWriter(file, template, ws) {
  return function (cb) {
    fs.readFile(file, 'utf8', function (err, data) {
      if (err) return cb(err);

      var t = template
        .replace(/<%=name>/g, getModule(file))
        .replace(/<%=originalDirname>/g, escape(path.dirname(file)))
        .replace(/<%=body>/g, data);

      ws.write(t);
      cb(null);
    });
  };
}

function writeLoadingOfModules(ws) {
  ws.write('loadModules();\n');
}

function getModule(filepath) {
  var file = path.basename(filepath);
  return file.replace(/\.js$/, '');
}

function escape(path) {
  return path.replace(/\\/g, '\\\\');
}

var files;
var dir = 'd:/projects/paprika/lib';
fs.readdir('d:/projects/paprika/lib', function (err, files) {
  if (err) throw err;

  var absolute = files.map(function (file) { return path.join(dir, file); });
  module.exports(absolute, process.stdout);
});
